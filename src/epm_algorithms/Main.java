/*
 * The MIT License
 *
 * Copyright 2016 angel.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package epm_algorithms;

import exceptions.IllegalActionException;
import java.awt.LayoutManager;
import java.awt.peer.PanelPeer;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Locale;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;
import keel.Dataset.InstanceSet;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.xml.sax.SAXException;

/**
 *
 * @author Ángel M. García-Vico
 * @version 1.0
 * @since JDK 1.8
 */
public class Main extends javax.swing.JFrame {

    private Vector<String> algorithms = new Vector<>();
    private Vector<JPanel> paramPanels = new Vector<>();
    private DefaultComboBoxModel modelo;
    private Document doc;
    private String actual_fully_qualified_class;

    /**
     * Creates new form Main
     */
    public Main() {
        // Here we have to read the algorithms XML and add to algorithms the names of the methods
        doc = readXML("algorithms.xml");

        initComponents();
        // Adds algorithm names
        NodeList nodes = doc.getElementsByTagName("algorithm");
        for (int i = 0; i < nodes.getLength(); i++) {
            Element node = (Element) nodes.item(i);
            // Parse the name of the method
            algorithms.add(node.getElementsByTagName("name").item(0).getTextContent());
        }

        // Sets the first algorithm parameters
        addParamsToPanel(doc, 0);
        // Adds the list of algorithms to the list ad set the first as default
        modelo = new DefaultComboBoxModel(algorithms);
        AlgorithmList.setModel(modelo);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Tabs = new javax.swing.JTabbedPane();
        LearnPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rutaTra = new javax.swing.JTextField();
        BrowseButtonTRA = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        rutaTst = new javax.swing.JTextField();
        BrowseButtonTST = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        AlgorithmList = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        ParametersPanel = new javax.swing.JPanel();
        ExecutionInfoLearn = new javax.swing.JLabel();
        SaveModelCheckbox = new javax.swing.JCheckBox();
        rutaModel = new javax.swing.JTextField();
        BrowseButtonModel = new javax.swing.JButton();
        LoadPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        InstancesPath = new javax.swing.JTextField();
        BrowseModelButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        ModelPath1 = new javax.swing.JTextField();
        BrowseInstances = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        ExecutionInfoLoad = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Emerging Pattern Mining Algorithms Framework");
        setBackground(new java.awt.Color(204, 204, 204));
        setMinimumSize(getPreferredSize());

        jLabel1.setText("Training file:");

        rutaTra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rutaTraActionPerformed(evt);
            }
        });

        BrowseButtonTRA.setText("Browse...");
        BrowseButtonTRA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseButtonTRAActionPerformed(evt);
            }
        });

        jLabel2.setText("Test file (optional): ");

        rutaTst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rutaTstActionPerformed(evt);
            }
        });

        BrowseButtonTST.setText("Browse...");
        BrowseButtonTST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseButtonTSTActionPerformed(evt);
            }
        });

        jLabel3.setText("Algorithm:");

        AlgorithmList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlgorithmListActionPerformed(evt);
            }
        });

        jButton1.setText("Run!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ParametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Algorithms Parameters"));

        SaveModelCheckbox.setSelected(true);
        SaveModelCheckbox.setText("Save Model:");
        SaveModelCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveModelCheckboxActionPerformed(evt);
            }
        });

        rutaModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rutaModelActionPerformed(evt);
            }
        });

        BrowseButtonModel.setText("Browse...");
        BrowseButtonModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseButtonModelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LearnPanelLayout = new javax.swing.GroupLayout(LearnPanel);
        LearnPanel.setLayout(LearnPanelLayout);
        LearnPanelLayout.setHorizontalGroup(
            LearnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LearnPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(LearnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LearnPanelLayout.createSequentialGroup()
                        .addGroup(LearnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(SaveModelCheckbox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(LearnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(LearnPanelLayout.createSequentialGroup()
                                .addGroup(LearnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(rutaTra, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                                    .addComponent(rutaTst)
                                    .addComponent(rutaModel))
                                .addGap(18, 18, 18)
                                .addGroup(LearnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(BrowseButtonModel)
                                    .addComponent(BrowseButtonTRA)
                                    .addComponent(BrowseButtonTST)))
                            .addComponent(AlgorithmList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(LearnPanelLayout.createSequentialGroup()
                        .addGroup(LearnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ParametersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ExecutionInfoLearn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
            .addGroup(LearnPanelLayout.createSequentialGroup()
                .addGap(352, 352, 352)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 352, Short.MAX_VALUE))
        );
        LearnPanelLayout.setVerticalGroup(
            LearnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LearnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LearnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LearnPanelLayout.createSequentialGroup()
                        .addGroup(LearnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(rutaTra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BrowseButtonTRA))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(LearnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(rutaTst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BrowseButtonTST))
                        .addGap(46, 46, 46))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LearnPanelLayout.createSequentialGroup()
                        .addGroup(LearnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BrowseButtonModel)
                            .addComponent(SaveModelCheckbox)
                            .addComponent(rutaModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(LearnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(AlgorithmList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(ParametersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(2, 2, 2)
                .addComponent(ExecutionInfoLearn, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Tabs.addTab("Learn Model", LearnPanel);

        jLabel4.setText("Model: ");

        BrowseModelButton.setText("Browse...");
        BrowseModelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseModelButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Instances to Predict:");

        BrowseInstances.setText("Browse...");
        BrowseInstances.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseInstancesActionPerformed(evt);
            }
        });

        jButton2.setText("Run!");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LoadPanelLayout = new javax.swing.GroupLayout(LoadPanel);
        LoadPanel.setLayout(LoadPanelLayout);
        LoadPanelLayout.setHorizontalGroup(
            LoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoadPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LoadPanelLayout.createSequentialGroup()
                        .addComponent(ExecutionInfoLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(LoadPanelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(LoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addGap(5, 5, 5)
                        .addGroup(LoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ModelPath1)
                            .addComponent(InstancesPath, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(LoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BrowseModelButton)
                            .addComponent(BrowseInstances))))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        LoadPanelLayout.setVerticalGroup(
            LoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoadPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(BrowseModelButton)
                    .addComponent(ModelPath1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(LoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(InstancesPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BrowseInstances))
                .addGap(18, 18, 18)
                .addGroup(LoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(ExecutionInfoLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(344, Short.MAX_VALUE))
        );

        Tabs.addTab("Load Model", LoadPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tabs)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tabs)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // Dinamically calls the method learn of the method: VERY INTERESTING FUNCTION!
        try {
            ExecutionInfoLearn.setText("Executing Model... (This may take a while)");
            //First: instantiate the class selected with th fully qualified name of the read model
            Object model = Model.readModel(ModelPath1.getText());
            Class clase = Class.forName(((Model) model).getFullyQualifiedName());
            Object newObject = clase.newInstance();

            // Second: get the argument class
            Class[] args = new Class[1];
            args[0] = InstanceSet.class;

            // Third: Get the method 'learn' of the class and invoke it.
            clase.getMethod("predict", args).invoke(newObject, new InstanceSet());
            ExecutionInfoLearn.setText("Done.");

        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | NoSuchMethodException | SecurityException | IllegalArgumentException | IOException | InvocationTargetException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void BrowseInstancesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseInstancesActionPerformed
        // Create the file chooser pointing to the home directory of the actual user
        // Select only files and apply filter to select only *.dat files.
        JFileChooser fileChooser = new JFileChooser(new File(System.getProperty("user.home")));
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("KEEL data files", "dat"));
        // This eliminate the option of "All files" on the file selection dialog
        fileChooser.setAcceptAllFileFilterUsed(false);
        // Show the dialog
        int result = fileChooser.showOpenDialog(BrowseButtonTST.getParent());
        // If the user press in 'Ok'...
        if (result == JFileChooser.APPROVE_OPTION) {
            File fileSelected = fileChooser.getSelectedFile();
            InstancesPath.setText(fileSelected.getAbsolutePath());
        }
    }//GEN-LAST:event_BrowseInstancesActionPerformed

    private void BrowseModelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseModelButtonActionPerformed
        // Create the file chooser pointing to the home directory of the actual user
        // Select only files and apply filter to select only *.dat files.
        JFileChooser fileChooser = new JFileChooser(new File(System.getProperty("user.home")));
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(".ser Model files", "ser"));
        // This eliminate the option of "All files" on the file selection dialog
        fileChooser.setAcceptAllFileFilterUsed(false);
        // Show the dialog
        int result = fileChooser.showOpenDialog(BrowseButtonTST.getParent());
        // If the user press in 'Ok'...
        if (result == JFileChooser.APPROVE_OPTION) {
            File fileSelected = fileChooser.getSelectedFile();
            ModelPath1.setText(fileSelected.getAbsolutePath());
        }
    }//GEN-LAST:event_BrowseModelButtonActionPerformed

    private void SaveModelCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveModelCheckboxActionPerformed

        rutaModel.setEnabled(SaveModelCheckbox.isSelected());
        BrowseButtonModel.setEnabled(SaveModelCheckbox.isSelected());

    }//GEN-LAST:event_SaveModelCheckboxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        // Reads the parameters of the user
        ExecutionInfoLearn.setText("Reading parameters...");
        HashMap<String, String> params = readParameters();

        // Dinamically calls the method learn of the method: VERY INTERESTING FUNCTION!
        try {
            if (SaveModelCheckbox.isSelected() && rutaModel.getText().equals("")) {
                throw new exceptions.IllegalActionException("ERROR: You must specify a path to save the model.");
            }
            ExecutionInfoLearn.setText("Executing Model... (This may take a while)");
            //First: instantiate the class selected with th fully qualified name
            Object newObject;
            Class clase = Class.forName(actual_fully_qualified_class);
            newObject = clase.newInstance();

            // Second: get the argument class
            Class[] args = new Class[2];
            args[0] = InstanceSet.class;
            args[1] = HashMap.class;

            // Third: Get the method 'learn' of the class and invoke it. (cambiar "new InstanceSet" por el training)
            clase.getMethod("learn", args).invoke(newObject, new InstanceSet(), params);
            
            args = new Class[1];
            args[0] = String.class;
            clase.getMethod("saveModel", args).invoke(newObject, rutaModel.getText());
            ExecutionInfoLearn.setText("Done.");
            
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | NoSuchMethodException | SecurityException | IllegalArgumentException | InvocationTargetException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (exceptions.IllegalActionException ex) {
            ExecutionInfoLearn.setText("");
            ExecutionInfoLearn.setText(ex.getReason());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void AlgorithmListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlgorithmListActionPerformed
        // TODO add your handling code here:
        int value = AlgorithmList.getSelectedIndex();
        if (value != -1 || value > paramPanels.size()) {
            addParamsToPanel(doc, value);
        }
    }//GEN-LAST:event_AlgorithmListActionPerformed

    private void BrowseButtonTSTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseButtonTSTActionPerformed
        // Create the file chooser pointing to the home directory of the actual user
        // Select only files and apply filter to select only *.dat files.
        JFileChooser fileChooser = new JFileChooser(new File(System.getProperty("user.home")));
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("KEEL data files", "dat"));
        // This eliminate the option of "All files" on the file selection dialog
        fileChooser.setAcceptAllFileFilterUsed(false);
        // Show the dialog
        int result = fileChooser.showOpenDialog(BrowseButtonTST.getParent());
        // If the user press in 'Ok'...
        if (result == JFileChooser.APPROVE_OPTION) {
            File fileSelected = fileChooser.getSelectedFile();
            rutaTst.setText(fileSelected.getAbsolutePath());
        }
    }//GEN-LAST:event_BrowseButtonTSTActionPerformed

    private void rutaTstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rutaTstActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rutaTstActionPerformed

    private void BrowseButtonTRAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseButtonTRAActionPerformed
        // Create the file chooser pointing to the home directory of the actual user
        // Select only files and apply filter to select only *.dat files.
        JFileChooser fileChooser = new JFileChooser(new File(System.getProperty("user.home")));
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("KEEL data files", "dat"));
        // This eliminate the option of "All files" on the file selection dialog
        fileChooser.setAcceptAllFileFilterUsed(false);
        // Show the dialog
        int result = fileChooser.showOpenDialog(BrowseButtonTRA.getParent());
        // If the user press in 'Ok'...
        if (result == JFileChooser.APPROVE_OPTION) {
            File fileSelected = fileChooser.getSelectedFile();
            rutaTra.setText(fileSelected.getAbsolutePath());
        }
    }//GEN-LAST:event_BrowseButtonTRAActionPerformed

    private void rutaTraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rutaTraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rutaTraActionPerformed

    private void rutaModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rutaModelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rutaModelActionPerformed

    private void BrowseButtonModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseButtonModelActionPerformed
        // Create the file chooser pointing to the home directory of the actual user
        // Select only files and apply filter to select only *.dat files.
        JFileChooser fileChooser = new JFileChooser(new File(System.getProperty("user.home")));
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(".ser files", "ser"));
        // This eliminate the option of "All files" on the file selection dialog
        fileChooser.setAcceptAllFileFilterUsed(false);
        // Show the dialog
        int result = fileChooser.showOpenDialog(BrowseButtonTRA.getParent());
        // If the user press in 'Ok'...
        if (result == JFileChooser.APPROVE_OPTION) {
            File fileSelected = fileChooser.getSelectedFile();
            rutaModel.setText(fileSelected.getAbsolutePath() + ".ser");
        }
    }//GEN-LAST:event_BrowseButtonModelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new Main();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> AlgorithmList;
    private javax.swing.JButton BrowseButtonModel;
    private javax.swing.JButton BrowseButtonTRA;
    private javax.swing.JButton BrowseButtonTST;
    private javax.swing.JButton BrowseInstances;
    private javax.swing.JButton BrowseModelButton;
    private javax.swing.JLabel ExecutionInfoLearn;
    private javax.swing.JLabel ExecutionInfoLoad;
    private javax.swing.JTextField InstancesPath;
    private javax.swing.JPanel LearnPanel;
    private javax.swing.JPanel LoadPanel;
    private javax.swing.JTextField ModelPath1;
    private javax.swing.JPanel ParametersPanel;
    private javax.swing.JCheckBox SaveModelCheckbox;
    private javax.swing.JTabbedPane Tabs;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField rutaModel;
    private javax.swing.JTextField rutaTra;
    private javax.swing.JTextField rutaTst;
    // End of variables declaration//GEN-END:variables

    /**
     * Reads an XML file
     *
     * @param path The path to the xml
     * @return A DOM object
     */
    private static Document readXML(String path) {
        try {
            File fXmlFile = new File(path);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(fXmlFile);

            //optional, but recommended
            //read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
            doc.getDocumentElement().normalize();
            return doc;
        } catch (ParserConfigurationException | SAXException | IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    /**
     * Put in the parameter panel the parameters of the selected algorithm
     *
     * @param doc A DOM object with the algorthims and params definitions
     * @param index The position of the algorithm in the file
     */
    private void addParamsToPanel(Document doc, int index) {
        //Get algorithm
        NodeList nodes = doc.getElementsByTagName("algorithm");
        Element node = (Element) nodes.item(index);
        actual_fully_qualified_class = node.getElementsByTagName("class").item(0).getTextContent();
        //Clear the actual panel
        ParametersPanel.removeAll();

        /* Spinners:
            jSpinner1.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(6.0f) ,  // Valor por defecto
            Float.valueOf(0.0f),   // minimo
            Float.valueOf(100.0f), // Maximo
            Float.valueOf(0.5f)));  Paso */
        // Now, get the parameters
        try{
        NodeList parameters = node.getElementsByTagName("parameter");
        for (int j = 0; j < parameters.getLength(); j++) {
            Element nodeParam = (Element) parameters.item(j);
            switch (nodeParam.getElementsByTagName("type").item(0).getTextContent()) {
                case "integer":
                    ParametersPanel.add(new JLabel(nodeParam.getElementsByTagName("name").item(0).getTextContent() + ": "));
                    Integer defect,
                     min,
                     max;
                    defect = Integer.parseInt(nodeParam.getElementsByTagName("default").item(0).getTextContent());
                    Element domain = (Element) nodeParam.getElementsByTagName("domain").item(0);
                    min = Integer.parseInt(domain.getElementsByTagName("min").item(0).getTextContent());
                    max = Integer.parseInt(domain.getElementsByTagName("max").item(0).getTextContent());
                    ParametersPanel.add(new JSpinner(new SpinnerNumberModel(defect.intValue(), min.intValue(), max.intValue(), 1)));
                    break;

                case "real":
                    ParametersPanel.add(new JLabel(nodeParam.getElementsByTagName("name").item(0).getTextContent() + ": "));
                    Float defecto,
                     mini,
                     maxi;
                    defecto = Float.parseFloat(nodeParam.getElementsByTagName("default").item(0).getTextContent());
                    domain = (Element) nodeParam.getElementsByTagName("domain").item(0);
                    mini = Float.parseFloat(domain.getElementsByTagName("min").item(0).getTextContent());
                    maxi = Float.parseFloat(domain.getElementsByTagName("max").item(0).getTextContent());
                    ParametersPanel.add(new JSpinner(new SpinnerNumberModel(defecto.floatValue(), mini.floatValue(), maxi.floatValue(), (float) 0.01)));
                    break;

                case "nominal":
                    ParametersPanel.add(new JLabel(nodeParam.getElementsByTagName("name").item(0).getTextContent() + ": "));
                    domain = (Element) nodeParam.getElementsByTagName("domain").item(0);
                    Vector<String> values = new Vector<>();
                    NodeList list = domain.getElementsByTagName("item");
                    for (int i = 0; i < list.getLength(); i++) {
                        values.add(list.item(i).getTextContent());
                    }
                    DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel(values);
                    // Sets the default element:
                    comboBoxModel.setSelectedItem(values.get(Integer.parseInt(nodeParam.getElementsByTagName("default").item(0).getTextContent()) - 1));
                    JComboBox combo = new JComboBox(comboBoxModel);
                    ParametersPanel.add(combo);

            }
        
        }
        
        // Update the panel 
        ParametersPanel.validate();
        ParametersPanel.repaint();
        } catch(java.lang.ArrayIndexOutOfBoundsException ex) {
            // If algorithms.xml has an error disable all the interface.
            this.setEnabled(false);
            ExecutionInfoLearn.setText("");
            ExecutionInfoLearn.setText("FATAL ERROR: algorithms.xml has an error, interface blocked.");
        }
    }

    /**
     * Reads the parameters of the algorithm specified by the user on the
     * parameters panel
     *
     * @return A HashMap<String, String> with key the name of the parameter and
     * value the value of the parameter.
     */
    private HashMap<String, String> readParameters() {
        String key = "";
        HashMap<String, String> parameters = new HashMap<>();
        for (int i = 0; i < ParametersPanel.getComponentCount(); i++) {
            if (ParametersPanel.getComponent(i) instanceof JComboBox) {
                // Cast the component and add the value of the JLabel substracting the ': ' elements
                JComboBox element = (JComboBox) ParametersPanel.getComponent(i);
                parameters.put(key.substring(0, key.length() - 2), (String) element.getSelectedItem());
            } else if (ParametersPanel.getComponent(i) instanceof JSpinner) {
                JSpinner element = (JSpinner) ParametersPanel.getComponent(i);
                try {
                    parameters.put(key, Integer.toString((Integer) element.getValue()));
                } catch (java.lang.ClassCastException ex) {
                    parameters.put(key.substring(0, key.length() - 2), Double.toString((Double) element.getValue()));
                }
            } else if (ParametersPanel.getComponent(i) instanceof JLabel) {
                JLabel element = (JLabel) ParametersPanel.getComponent(i);
                key = element.getText();
            }
        }
        return parameters;
    }
}
